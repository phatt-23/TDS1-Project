
-- Generated by Oracle SQL Developer Data Modeler 24.3.1.351.0831
--   at:        2025-05-11 16:34:11 CEST
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE z_category 
    ( 
     category_id        INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY , 
     parent_category_id INTEGER , 
     category_name      VARCHAR2 (50)  NOT NULL 
    ) 
;


CREATE TABLE z_channel 
    ( 
     channel_id      INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY  , 
     user_id         INTEGER  NOT NULL , 
     channel_name    VARCHAR2 (50)  NOT NULL , 
     description     VARCHAR2 (1000) , 
     pfp_media_id    INTEGER , 
     banner_media_id INTEGER , 
     creation_date   TIMESTAMP DEFAULT current_timestamp  NOT NULL , 
     is_deleted      NUMBER  NOT NULL 
    ) 
;


CREATE TABLE z_comment 
    ( 
     comment_id        INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY  , 
     parent_comment_id INTEGER , 
     video_id          INTEGER  NOT NULL , 
     user_id           INTEGER  NOT NULL , 
     content           VARCHAR2 (500)  NOT NULL , 
     comment_date      TIMESTAMP DEFAULT current_timestamp  NOT NULL , 
     is_deleted        NUMBER DEFAULT 0  NOT NULL 
    ) 
;


CREATE TABLE z_comment_audit 
    ( 
     audit_id    INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY  , 
     comment_id  INTEGER  NOT NULL , 
     old_content VARCHAR2 (500)  NOT NULL , 
     new_content VARCHAR2 (500)  NOT NULL , 
     change_at   TIMESTAMP  NOT NULL 
    ) 
;

CREATE TABLE z_image_media 
    ( 
     media_id INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY  , 
     width    INTEGER  NOT NULL , 
     height   INTEGER  NOT NULL
    ) 
;


CREATE TABLE z_media 
    ( 
     media_id    INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY  , 
     url         VARCHAR2 (1000)  NOT NULL , 
     data        BLOB  NOT NULL , 
     upload_time TIMESTAMP  NOT NULL 
    ) 
;


CREATE TABLE z_playlist 
    ( 
     playlist_id   INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY  , 
     user_id       INTEGER , 
     channel_id    INTEGER , 
     title         VARCHAR2 (255)  NOT NULL , 
     visibility    VARCHAR2 (32)  NOT NULL , 
     creation_date TIMESTAMP DEFAULT current_timestamp  NOT NULL , 
     is_deleted    NUMBER DEFAULT 0  NOT NULL 
    ) 
;
ALTER TABLE z_playlist 
    ADD CONSTRAINT PlaylistCreator CHECK ( 
        (  (user_id IS NOT NULL) AND 
         (channel_id IS NULL) ) OR 
        (  (channel_id IS NOT NULL) AND 
         (user_id IS NULL) ) OR  
        (  (user_id IS NULL)  AND 
         (channel_id IS NULL) )  ) 
;


CREATE TABLE z_playlist_video 
    ( 
     playlist_id INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY  , 
     added_date  TIMESTAMP DEFAULT current_timestamp  NOT NULL , 
     "order"     INTEGER  NOT NULL , 
     video_id    INTEGER  NOT NULL 
    ) 
;


CREATE TABLE z_reaction 
    ( 
     reaction_id   INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY  , 
     reaction_kind VARCHAR2 (32)  NOT NULL , 
     user_id       INTEGER  NOT NULL , 
     comment_id    INTEGER , 
     video_id      INTEGER , 
     reaction_date TIMESTAMP DEFAULT current_timestamp  NOT NULL 
    ) 
;

ALTER TABLE z_reaction 
    ADD 
    CHECK (reaction_kind IN ('dislike', 'like')) 
;
ALTER TABLE z_reaction 
    ADD CONSTRAINT Reaction_Target CHECK ( 
        (  (comment_id IS NOT NULL) AND 
         (video_id IS NULL) ) OR 
        (  (video_id IS NOT NULL) AND 
         (comment_id IS NULL) )  ) 
;

CREATE TABLE z_subscription 
    ( 
     user_id                 INTEGER  NOT NULL  , 
     channel_id              INTEGER  NOT NULL , 
     notification_preference NUMBER DEFAULT 1  NOT NULL , 
     subscription_date       TIMESTAMP  NOT NULL 
    ) 
;

ALTER TABLE z_subscription 
    ADD CONSTRAINT z_subscription_PK PRIMARY KEY ( user_id, channel_id ) ;

CREATE TABLE z_user 
    ( 
     user_id            INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY  , 
     username           VARCHAR2 (20)  NOT NULL , 
     first_name         VARCHAR2 (50)  NOT NULL , 
     last_name          VARCHAR2 (50)  NOT NULL , 
     email              VARCHAR2 (255)  NOT NULL , 
     profile_picture_id INTEGER , 
     registration_date  TIMESTAMP DEFAULT current_timestamp  NOT NULL , 
     about_me           VARCHAR2 (500) , 
     is_deleted         NUMBER DEFAULT 0  NOT NULL 
    ) 
;


CREATE TABLE z_user_audit 
    ( 
     audit_id      INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY  , 
     user_id       INTEGER  NOT NULL , 
     field_changed VARCHAR2 (50) , 
     old_value     VARCHAR2 (500) , 
     new_value     VARCHAR2 (500) , 
     change_at     TIMESTAMP DEFAULT current_timestamp  NOT NULL 
    ) 
;


CREATE TABLE z_video 
    ( 
     video_id           INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY  , 
     channel_id         INTEGER  NOT NULL , 
     thumbnail_media_id INTEGER  NOT NULL , 
     video_media_id     INTEGER  NOT NULL , 
     visibility         VARCHAR2 (32)  NOT NULL , 
     title              VARCHAR2 (255)  NOT NULL , 
     description        VARCHAR2 (500) , 
     upload_date        TIMESTAMP DEFAULT current_timestamp  NOT NULL , 
     duration           INTEGER  NOT NULL , 
     is_monetized       NUMBER DEFAULT 1  NOT NULL , 
     is_deleted         NUMBER DEFAULT 0  NOT NULL 
    ) 
;

CREATE TABLE z_video_audit 
    ( 
     audit_id      INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY  , 
     video_id      INTEGER  NOT NULL , 
     field_changed VARCHAR2 (50) , 
     old_value     VARCHAR2 (500) , 
     new_value     VARCHAR2 (500) , 
     change_at     TIMESTAMP DEFAULT current_timestamp  NOT NULL 
    ) 
;


CREATE TABLE z_video_category 
    ( 
     video_id    INTEGER  NOT NULL , 
     category_id INTEGER  NOT NULL 
    ) 
;

ALTER TABLE z_video_category 
    ADD CONSTRAINT z_video_category_PK PRIMARY KEY ( video_id, category_id ) ;

CREATE TABLE z_video_media 
    ( 
     media_id   INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY  , 
     duration   INTEGER  NOT NULL , 
     resolution INTEGER  NOT NULL
    ) 
;

CREATE TABLE z_video_view 
    ( 
     video_view_id    INTEGER  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY  , 
     user_id          INTEGER  NOT NULL , 
     view_date        TIMESTAMP DEFAULT current_timestamp  NOT NULL , 
     duration_watched INTEGER  NOT NULL , 
     video_id         INTEGER  NOT NULL 
    ) 
;


ALTER TABLE z_category 
    ADD CONSTRAINT z_category_z_category_FK FOREIGN KEY 
    ( 
     parent_category_id
    ) 
    REFERENCES z_category 
    ( 
     category_id
    ) 
;

ALTER TABLE z_channel 
    ADD CONSTRAINT z_channel_z_image_media_FK FOREIGN KEY 
    ( 
     banner_media_id
    ) 
    REFERENCES z_image_media 
    ( 
     media_id
    ) 
;

ALTER TABLE z_channel 
    ADD CONSTRAINT z_channel_z_image_media_FKv2 FOREIGN KEY 
    ( 
     pfp_media_id
    ) 
    REFERENCES z_image_media 
    ( 
     media_id
    ) 
;

ALTER TABLE z_channel 
    ADD CONSTRAINT z_channel_z_user_FK FOREIGN KEY 
    ( 
     user_id
    ) 
    REFERENCES z_user 
    ( 
     user_id
    ) 
;

ALTER TABLE z_comment_audit 
    ADD CONSTRAINT z_comment_audit_z_comment_FK FOREIGN KEY 
    ( 
     comment_id
    ) 
    REFERENCES z_comment 
    ( 
     comment_id
    ) 
;

ALTER TABLE z_comment 
    ADD CONSTRAINT z_comment_z_comment_FK FOREIGN KEY 
    ( 
     parent_comment_id
    ) 
    REFERENCES z_comment 
    ( 
     comment_id
    ) 
    ON DELETE SET NULL 
;

ALTER TABLE z_comment 
    ADD CONSTRAINT z_comment_z_user_FK FOREIGN KEY 
    ( 
     user_id
    ) 
    REFERENCES z_user 
    ( 
     user_id
    ) 
;

ALTER TABLE z_comment 
    ADD CONSTRAINT z_comment_z_video_FK FOREIGN KEY 
    ( 
     video_id
    ) 
    REFERENCES z_video 
    ( 
     video_id
    ) 
;

ALTER TABLE z_image_media 
    ADD CONSTRAINT z_image_media_z_media_FK FOREIGN KEY 
    ( 
     media_id
    ) 
    REFERENCES z_media 
    ( 
     media_id
    ) 
;

ALTER TABLE z_playlist_video 
    ADD CONSTRAINT z_playlist_video_z_playlist_FK FOREIGN KEY 
    ( 
     playlist_id
    ) 
    REFERENCES z_playlist 
    ( 
     playlist_id
    ) 
;

ALTER TABLE z_playlist_video 
    ADD CONSTRAINT z_playlist_video_z_video_FK FOREIGN KEY 
    ( 
     video_id
    ) 
    REFERENCES z_video 
    ( 
     video_id
    ) 
;

ALTER TABLE z_playlist 
    ADD CONSTRAINT z_playlist_z_channel_FK FOREIGN KEY 
    ( 
     channel_id
    ) 
    REFERENCES z_channel 
    ( 
     channel_id
    ) 
    ON DELETE SET NULL 
;

ALTER TABLE z_playlist 
    ADD CONSTRAINT z_playlist_z_user_FK FOREIGN KEY 
    ( 
     user_id
    ) 
    REFERENCES z_user 
    ( 
     user_id
    ) 
    ON DELETE SET NULL 
;

ALTER TABLE z_reaction 
    ADD CONSTRAINT z_reaction_z_comment_FK FOREIGN KEY 
    ( 
     comment_id
    ) 
    REFERENCES z_comment 
    ( 
     comment_id
    ) 
    ON DELETE CASCADE 
;

ALTER TABLE z_reaction 
    ADD CONSTRAINT z_reaction_z_user_FK FOREIGN KEY 
    ( 
     user_id
    ) 
    REFERENCES z_user 
    ( 
     user_id
    ) 
;

ALTER TABLE z_reaction 
    ADD CONSTRAINT z_reaction_z_video_FK FOREIGN KEY 
    ( 
     video_id
    ) 
    REFERENCES z_video 
    ( 
     video_id
    ) 
    ON DELETE CASCADE 
;

ALTER TABLE z_subscription 
    ADD CONSTRAINT z_subscription_z_channel_FK FOREIGN KEY 
    ( 
     channel_id
    ) 
    REFERENCES z_channel 
    ( 
     channel_id
    ) 
;

ALTER TABLE z_subscription 
    ADD CONSTRAINT z_subscription_z_user_FK FOREIGN KEY 
    ( 
     user_id
    ) 
    REFERENCES z_user 
    ( 
     user_id
    ) 
;

ALTER TABLE z_user_audit 
    ADD CONSTRAINT z_user_audit_z_user_FK FOREIGN KEY 
    ( 
     user_id
    ) 
    REFERENCES z_user 
    ( 
     user_id
    ) 
;

ALTER TABLE z_user 
    ADD CONSTRAINT z_user_z_image_media_FK FOREIGN KEY 
    ( 
     profile_picture_id
    ) 
    REFERENCES z_image_media 
    ( 
     media_id
    ) 
;

ALTER TABLE z_video_audit 
    ADD CONSTRAINT z_video_audit_z_video_FK FOREIGN KEY 
    ( 
     video_id
    ) 
    REFERENCES z_video 
    ( 
     video_id
    ) 
;

ALTER TABLE z_video_category 
    ADD CONSTRAINT z_video_category_z_category_FK FOREIGN KEY 
    ( 
     category_id
    ) 
    REFERENCES z_category 
    ( 
     category_id
    ) 
;

ALTER TABLE z_video_category 
    ADD CONSTRAINT z_video_category_z_video_FK FOREIGN KEY 
    ( 
     video_id
    ) 
    REFERENCES z_video 
    ( 
     video_id
    ) 
;

ALTER TABLE z_video_media 
    ADD CONSTRAINT z_video_media_z_media_FK FOREIGN KEY 
    ( 
     media_id
    ) 
    REFERENCES z_media 
    ( 
     media_id
    ) 
;

ALTER TABLE z_video_view 
    ADD CONSTRAINT z_video_view_z_user_FK FOREIGN KEY 
    ( 
     user_id
    ) 
    REFERENCES z_user 
    ( 
     user_id
    ) 
;

ALTER TABLE z_video_view 
    ADD CONSTRAINT z_video_view_z_video_FK FOREIGN KEY 
    ( 
     video_id
    ) 
    REFERENCES z_video 
    ( 
     video_id
    ) 
;

ALTER TABLE z_video 
    ADD CONSTRAINT z_video_z_channel_FK FOREIGN KEY 
    ( 
     channel_id
    ) 
    REFERENCES z_channel 
    ( 
     channel_id
    ) 
;

ALTER TABLE z_video 
    ADD CONSTRAINT z_video_z_image_media_FK FOREIGN KEY 
    ( 
     thumbnail_media_id
    ) 
    REFERENCES z_image_media 
    ( 
     media_id
    ) 
;

ALTER TABLE z_video 
    ADD CONSTRAINT z_video_z_video_media_FK FOREIGN KEY 
    ( 
     video_media_id
    ) 
    REFERENCES z_video_media 
    ( 
     media_id
    ) 
;

CREATE OR REPLACE TRIGGER FKNTM_z_channel 
BEFORE UPDATE OF user_id 
ON z_channel 
BEGIN 
  raise_application_error(-20225,'Non Transferable FK constraint  on table z_channel is violated'); 
END; 
/

CREATE OR REPLACE TRIGGER FKNTO_z_comment 
BEFORE UPDATE OF parent_comment_id 
ON z_comment 
FOR EACH ROW 
BEGIN 
 IF :old.parent_comment_id IS NOT NULL THEN 
  raise_application_error(-20225,'Non Transferable FK constraint z_comment_z_comment_FK on table z_comment is violated'); 
 END IF; 
END; 
/

CREATE OR REPLACE TRIGGER FKNTM_z_comment 
BEFORE UPDATE OF user_id, video_id 
ON z_comment 
BEGIN 
  raise_application_error(-20225,'Non Transferable FK constraint  on table z_comment is violated'); 
END; 
/

CREATE OR REPLACE TRIGGER FKNTM_z_comment_audit 
BEFORE UPDATE OF comment_id 
ON z_comment_audit 
BEGIN 
  raise_application_error(-20225,'Non Transferable FK constraint  on table z_comment_audit is violated'); 
END; 
/

CREATE OR REPLACE TRIGGER FKNTO_z_reaction 
BEFORE UPDATE OF comment_id, video_id 
ON z_reaction 
FOR EACH ROW 
BEGIN 
 IF :old.comment_id IS NOT NULL THEN 
  raise_application_error(-20225,'Non Transferable FK constraint z_reaction_z_comment_FK on table z_reaction is violated'); 
 END IF; 
 IF :old.video_id IS NOT NULL THEN 
  raise_application_error(-20225,'Non Transferable FK constraint z_reaction_z_video_FK on table z_reaction is violated'); 
 END IF; 
END; 
/

CREATE OR REPLACE TRIGGER FKNTM_z_reaction 
BEFORE UPDATE OF user_id 
ON z_reaction 
BEGIN 
  raise_application_error(-20225,'Non Transferable FK constraint  on table z_reaction is violated'); 
END; 
/

CREATE OR REPLACE TRIGGER FKNTM_z_subscription 
BEFORE UPDATE OF channel_id, user_id 
ON z_subscription 
BEGIN 
  raise_application_error(-20225,'Non Transferable FK constraint  on table z_subscription is violated'); 
END; 
/

CREATE OR REPLACE TRIGGER FKNTM_z_video 
BEFORE UPDATE OF video_media_id 
ON z_video 
BEGIN 
  raise_application_error(-20225,'Non Transferable FK constraint  on table z_video is violated'); 
END; 
/

CREATE OR REPLACE TRIGGER FKNTM_z_video_audit 
BEFORE UPDATE OF video_id 
ON z_video_audit 
BEGIN 
  raise_application_error(-20225,'Non Transferable FK constraint  on table z_video_audit is violated'); 
END; 
/

CREATE OR REPLACE TRIGGER FKNTM_z_video_view 
BEFORE UPDATE OF user_id, video_id 
ON z_video_view 
BEGIN 
  raise_application_error(-20225,'Non Transferable FK constraint  on table z_video_view is violated'); 
END; 
/

--  ERROR: No Discriminator Column found in Arc FKArc_7 - constraint trigger for Arc cannot be generated 

CREATE OR REPLACE TRIGGER arc_update_z_reaction
    BEFORE INSERT OR UPDATE OF comment_id, video_id
    ON z_reaction
    FOR EACH ROW
BEGIN
    IF :NEW.video_id IS NULL AND :NEW.comment_id IS NULL THEN
        raise_application_error(-50001, 'Arc on z_reaction must have at exactly one target FK set.');
    END IF;

    IF NOT :NEW.video_id IS NULL AND NOT :NEW.comment_id IS NULL THEN
        raise_application_error(-50001, 'Arc on z_reaction may only have one target FK set.');
    END IF;
END

--  ERROR: No Discriminator Column found in Arc FKArc_7 - constraint trigger for Arc cannot be generated


